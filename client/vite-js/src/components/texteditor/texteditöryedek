import React, { useState, useEffect } from 'react';
import { TextField, Button, Typography, ListItem,InputAdornment, } from '@mui/material';
import axios from 'axios';

/**
 * 
 * @param {("typography,listItem")} params.elementType
 * @returns 
 */
const TextEditor = ({ isAdmin, initialText, textId, elementType, variant, css, textDataList, setTextDataList, blogProducts }) => {
  const [text, setText] = useState(initialText);

  useEffect(() => {
    setText(initialText); // initialText değiştiğinde durumu güncelle
  }, [initialText]);

  const handleUpdate = async () => {
    try {
      await axios.put(`http://localhost:3002/api/texts/${textId}`, {
        text, // Güncellenmiş metin
      });
      const needToUpdateIndex = textDataList.findIndex(item => item.id === textId);
      let tempList = [...textDataList];
      tempList[needToUpdateIndex].text = text;
      setTextDataList(tempList);
      alert('Metin güncellendi!');
    } catch (error) {
      console.error('Güncelleme hatası:', error);
      alert('Güncelleme sırasında bir hata oluştu.');
    }
  };

  if (!isAdmin && elementType === "listItem") {
    return (
      <div>
        <ListItem sx={{ ...css }}>{initialText}</ListItem>
      </div>
    );
  }

  if (!isAdmin) {
    return (
      <div>
        <Typography sx={{ ...css }} variant={variant}>{initialText}</Typography>
      </div>
    );
  }

  if (isAdmin && elementType === "select") {
    return (
      <div>
        <TextField
          label="Üstteki Yazıyı Düzenle"
          variant="outlined"
          value={text}
          onChange={(e) => setText(e.target.value)}
          fullWidth
          multiline
        />
        <Button variant="contained" color="primary" onClick={handleUpdate}>
          Güncelle
        </Button>
        {blogProducts.map((product, index) => (
          <div key={index}>
            <TextField
              label="Üstteki Yazıyı Düzenle"
              variant="outlined"
              sx={{mt:2}}
              size='small'
defaultValue={product}
              onChange={(e) => setText(e.target.value)}
              fullWidth
              multiline
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <Button variant="contained" color="primary" onClick={handleUpdate}>
                      Güncelle
                    </Button>
                  </InputAdornment>
                ),
              }}
            />
      
          </div>
        ))}
      </div>
    );
  }

  return (
    <div>
      <TextField
        label="Üstteki Yazıyı Düzenle"
        variant="outlined"
        value={text}
        onChange={(e) => setText(e.target.value)}
        fullWidth
        multiline
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <Button variant="contained" color="primary" onClick={handleUpdate}>
                Güncelle
              </Button>
            </InputAdornment>
          ),
        }}
      />
    
    </div>
  );
};

export default TextEditor;
